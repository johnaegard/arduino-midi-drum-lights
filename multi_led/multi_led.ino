#include <MIDI.h>
#include <limits.h>

MIDI_CREATE_DEFAULT_INSTANCE();

#define BOARD_LED 13
#define KICK 36
#define SNARE 38
#define SNARE_RIM 40
#define XSTICK 37
#define TOM1 48
#define TOM1_RIM 50
#define TOM2 45
#define TOM2_RIM 47
#define TOM3 43
#define TOM3_RIM 58
#define HIHAT_OPEN 46
#define HIHAT_OPEN_RIM 26
#define HIHAT_CLOSED 42
#define HIHAT_CLOSED_RIM 22
#define HIHAT_PEDAL 44
#define CRASH1 49
#define CRASH1_EDGE 55
#define CRASH2 57
#define CRASH2_EDGE 52
#define RIDE 51
#define RIDE_EDGE 59
#define RIDE_BELL 53

#define LED_1  3
#define LED_2  5
#define LED_3  9
#define LED_4  10
#define LED_5  11

#define ENERGY_FLOOR 0
#define ENERGY_FOR_SINGLE_LED 255
#define ENERGY_CEIL 5*ENERGY_FOR_SINGLE_LED

#define CRASH_BOOST 300
#define DECAY 0

int iEnergy = 0;
byte leds[] = { 
  LED_1, LED_2, LED_3, LED_4, LED_5 };

void setup()
{
  MIDI.setHandleNoteOn(handleNoteOn);
  MIDI.setHandleNoteOff(handleNoteOff);
  MIDI.begin(MIDI_CHANNEL_OMNI); 

  pinMode(BOARD_LED, OUTPUT);
  pinMode(LED_1,OUTPUT);
  pinMode(LED_2,OUTPUT);
  pinMode(LED_3,OUTPUT);
  pinMode(LED_4,OUTPUT);
  pinMode(LED_5,OUTPUT);
  testLeds();
  Serial.begin(9600);
}

void loop(){
  MIDI.read();
  addEnergy();
  decayEnergy();

}

void addEnergy() {
  iEnergy=iEnergy+20 ; 
}



void decayEnergy() {
  iEnergy = iEnergy - DECAY;
  if ( iEnergy < ENERGY_FLOOR  ) {
    iEnergy = ENERGY_FLOOR;
  }
  else if (iEnergy > ENERGY_CEIL ) {
    iEnergy = ENERGY_CEIL;
  }
}

void lightPixels() {
  byte ledsToLight = ( iEnergy == 0 ) ? 0 : ( iEnergy / ENERGY_FOR_SINGLE_LED  ) +1;
  byte finalLed = ledsToLight;
  byte finalLedBrightness = iEnergy % ENERGY_FOR_SINGLE_LED;
  Serial.print("iEnergy=");
  Serial.println(iEnergy,DEC);
  Serial.print("ledsToLight=");
  Serial.println(ledsToLight, DEC);

  for(byte led=0;led<ledsToLight;led++) {
    analogWrite(leds[led],255);
  }

  Serial.print("finalBrightness=");
    byte finalBrightness = iEnergy % ENERGY_CEIL;
  Serial.println(finalBrightness, DEC);
    analogWrite(leds[finalLed],linearBrightness(finalBrightness));
  }

}

void handleNoteOn(byte channel, byte instrument, byte velocity){
  on();
  switch(instrument) {
  case CRASH2_EDGE:
    iEnergy = iEnergy + CRASH_BOOST;
    break;
  case CRASH2:
    iEnergy = iEnergy + CRASH_BOOST;
    break;
  }
}

void handleNoteOff(byte channel, byte pitch, byte velocity){
  off();
}

//void setLed(float r, float g, float b, float fB) {
//  analogWrite(RED,   linearBrightness(r*fB));
//  analogWrite(GREEN, linearBrightness(g*fB));
//  analogWrite(BLUE,  linearBrightness(b*fB));
//}

const byte LINEAR_BRIGHTNESS_TABLE[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05,
  0x05, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B,
  0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0F, 0x0F, 0x10, 0x11, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
  0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x23, 0x24, 0x26, 0x27, 0x29, 0x2B, 0x2C,
  0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E, 0x40, 0x43, 0x45, 0x47, 0x4A, 0x4C, 0x4F,
  0x51, 0x54, 0x57, 0x59, 0x5C, 0x5F, 0x62, 0x64, 0x67, 0x6A, 0x6D, 0x70, 0x73, 0x76, 0x79, 0x7C,
  0x7F, 0x82, 0x85, 0x88, 0x8B, 0x8E, 0x91, 0x94, 0x97, 0x9A, 0x9C, 0x9F, 0xA2, 0xA5, 0xA7, 0xAA,
  0xAD, 0xAF, 0xB2, 0xB4, 0xB7, 0xB9, 0xBB, 0xBE, 0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE,
  0xD0, 0xD2, 0xD3, 0xD5, 0xD7, 0xD8, 0xDA, 0xDB, 0xDD, 0xDE, 0xDF, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5,
  0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xED, 0xEE, 0xEF, 0xEF, 0xF0, 0xF1, 0xF1, 0xF2,
  0xF2, 0xF3, 0xF3, 0xF4, 0xF4, 0xF5, 0xF5, 0xF6, 0xF6, 0xF6, 0xF7, 0xF7, 0xF7, 0xF8, 0xF8, 0xF8,
  0xF9, 0xF9, 0xF9, 0xF9, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFC,
  0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD,
  0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF};

byte linearBrightness(byte rawBrightness) {
  return LINEAR_BRIGHTNESS_TABLE[rawBrightness];
}

void on()
{
  digitalWrite(BOARD_LED,HIGH);
}

void off()
{
  digitalWrite(BOARD_LED,LOW);
}

void testLeds() {
  analogWrite(LED_1,255);
  delay(100);
  analogWrite(LED_2,255);
  delay(100);
  analogWrite(LED_3,255);
  delay(100);
  analogWrite(LED_4,255);
  delay(100);
  analogWrite(LED_5,255);
  delay(100);
  analogWrite(LED_5,0);
  delay(100);
  analogWrite(LED_4,0);
  delay(100);
  analogWrite(LED_3,0);
  delay(100);
  analogWrite(LED_2,0);
  delay(100);
  analogWrite(LED_1,0);
  delay(100);
}









